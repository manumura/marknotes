package pub_dashboards_articles_new

import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/pub/pages/dashboards"
import "github.com/muhwyndhamhp/marknotes/pkg/models"
import "strings"
import "fmt"
import "github.com/muhwyndhamhp/marknotes/utils/tern"

type NewVM struct {
	Opts      pub_variables.DashboardOpts
	UploadURL string
	Post      *models.Post
}

templ New(vm NewVM) {
	@pub_dashboard.Dashboard(pub_variables.DashboardOpts{
		Nav:               vm.Opts.Nav,
		AdditionalHeaders: vm.Opts.AdditionalHeaders,
		BreadCrumbs:       vm.Opts.BreadCrumbs,
		Comp:              new(vm.UploadURL, vm.Post),
	})
}

templ submitButton(existingID uint) {
	<div class="w-full flex flex-row justify-between py-6 join join-horizontal">
		<button
			class="btn btn-primary btn-lg flex-grow join-item"
			hx-post={ fmt.Sprintf("/dashboard/articles/push?status=published&existingID=%d", existingID) }
			hx-target="#dashboard-content"
			hx-swap="afterend"
			hx-vals="js:{content_json: window.editor.getJSON()}"
			hx-indicator="#global-progress"
		>
			Publish
		</button>
		<button
			class="btn btn-secondary btn-lg flex-grow join-item"
			hx-post={ fmt.Sprintf("/dashboard/articles/push?status=draft&existingID=%d", existingID) }
			hx-target="#dashboard-content"
			hx-swap="afterend"
			hx-vals="js:{content_json: window.editor.getJSON()}"
		>
			Save Draft
		</button>
	</div>
}

templ new(uploadURL string, existingPost *models.Post) {
	<div class="w-full h-full">
		<br/>
		<div class="flex flex-col justify-center items-center">
			<form id="form-post" class="w-full md:max-w-3xl lg:max-w-4xl">
				<textarea
					placeholder="Blog title goes here..."
					class="text-4xl textarea textarea-xs textarea-ghost font-extrabold
               resize-y
               align-middle
               text-justify placeholder:text-2xl placeholder:font-normal border-transparent w-full p-6
               mt-0 focus:outline-none min-h-1"
					type="text"
					name="title"
					rows="2"
				>
					if existingPost != nil {
						{ existingPost.Title }
					}
				</textarea>
				<br/>
				<textarea
					class="hidden"
					name="content"
					type="text"
					id="content"
					if existingPost != nil {
						value={ string(existingPost.EncodedContent) }
					}
				></textarea>
				<input
					class="hidden"
					name="tags"
					type="text"
					id="tags"
					if existingPost != nil {
						value={ TagsToCommaSeparated(existingPost.Tags) }
					}
				/>
				<br/>
				<div
					_={ fmt.Sprintf(
               "on load or htmx:swap set window.content to %s then trigger loadEditor",
               tern.Struct(existingPost, &models.Post{}).Content,
               ) }
					class="card w-full md:max-w-3xl lg:max-w-4xl min-h-96 bg-base-100 p-6 shadow-2xl"
					hx-get="/dashboard/editor"
					hx-trigger="loadEditor"
					hx-swap="outerHTML"
				></div>
				@submitButton(tern.Struct(existingPost, &models.Post{}).ID)
			</form>
		</div>
		<br/>
		<div class="h-20"></div>
	</div>
}

func TagsToCommaSeparated(tags []*models.Tag) string {
	var tagNames []string
	for _, tag := range tags {
		tagNames = append(tagNames, tag.Title)
	}
	return strings.Join(tagNames, ",")
}
