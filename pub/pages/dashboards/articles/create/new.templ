package pub_dashboards_articles_new

import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/pub/pages/dashboards"
import "github.com/muhwyndhamhp/marknotes/pkg/models"
import "strings"
import "fmt"
import "github.com/muhwyndhamhp/marknotes/utils/tern"
import "github.com/muhwyndhamhp/marknotes/pub/assets"

type NewVM struct {
	Opts      pub_variables.DashboardOpts
	UploadURL string
	BaseURL   string
	Post      *models.Post
}

templ New(vm NewVM) {
	@pub_dashboard.Dashboard(pub_variables.DashboardOpts{
		Nav:               vm.Opts.Nav,
		AdditionalHeaders: vm.Opts.AdditionalHeaders,
		BreadCrumbs:       vm.Opts.BreadCrumbs,
		Comp:              new(vm.Post, vm.BaseURL, vm.UploadURL),
	})
}

templ submitButton(existingID uint) {
	<div class="w-full flex flex-row justify-between py-6 join join-horizontal">
		<button
			id="publish-button"
			class="btn btn-primary btn-lg flex-grow join-item"
			hx-post={ fmt.Sprintf("/dashboard/articles/push?status=published&existingID=%d", existingID) }
			if existingID != 0 {
				hx-target="#dashboard-content"
				hx-swap="afterend"
			} else {
				hx-target="#admin-root"
				hx-swap="outerHTML"
			}
			hx-vals="js:{content_json: window.editor.getJSON()}"
			hx-indicator="#global-progress"
		>
			Publish
		</button>
		<button
			id="draft-button"
			class="btn btn-secondary btn-lg flex-grow join-item"
			hx-post={ fmt.Sprintf("/dashboard/articles/push?status=draft&existingID=%d", existingID) }
			if existingID != 0 {
				hx-target="#dashboard-content"
				hx-swap="afterend"
			} else {
				hx-target="#admin-root"
				hx-swap="outerHTML"
			}
			hx-vals="js:{content_json: window.editor.getJSON()}"
		>
			Save Draft
		</button>
	</div>
}

templ new(existingPost *models.Post, baseURL, uploadURL string) {
	<div class="w-full h-full">
		<br/>
		<div class="flex flex-col justify-center items-center">
			<form id="form-post" class="w-full md:max-w-3xl lg:max-w-4xl">
				@uploadHeaderImage()
				<div
					id="header-image-base"
					class={ "w-full h-56 card bg-base-100/40 outline-dashed outline-secondary",
          templ.KV(
          "outline-transparent",
          existingPost != nil && existingPost.HeaderImageURL != "",
          ) }
					_={ fmt.Sprintf(`
                  on dragover
                     halt the event
                     then remove .outline-secondary from me
                     then remove .text-primary from the first <h1/> in me
                  end

                  on dragleave
                     add .outline-secondary to me
                     then add .text-primary to the first <h1/> in me
                  end

                  on drop
                     remove .outline-secondary from me
                     then remove .text-primary from the first <h1/> in me
                     then call window.headerUpload(event, '%s')
                     js(it)
                        return JSON.parse(it).data.url
                     end
                     then set the @src of the first <img/> in me to it
                     then set the @value of #header_image_url to it
                     then set the @alt of #header_image_url to "Blogpost Header Image"
                     then remove .hidden from the first <div/> in me
                     then add .hidden to the first <h1/> in me
                     then add .outline-transparent to me
                     then Swal.close()
                  end
               `, uploadURL) }
				>
					<div
						class={ "w-full h-full relative",
              templ.KV(
              "hidden",
              existingPost == nil || existingPost.HeaderImageURL == "",
              ) }
					>
						<div
							class="btn btn-circle btn-neutral absolute top-2 right-2"
							_="
            on click
               halt the event
               then set the @value of #header_image_url to ''
               then add .hidden to the closest parent <div/>
               then remove .hidden from the first <h1/> in #header-image-base
               then remove .outline-transparent from #header-image-base
            end
            "
						>
							@pub_assets.Close()
						</div>
						<img
							class="w-full h-full object-cover"
							src={ HeaderURL(existingPost) }
						/>
					</div>
					<h1
						class={ "text-2xl font-bold text-center mx-auto my-auto text-primary",
              templ.KV(
              "hidden",
              existingPost != nil && existingPost.HeaderImageURL != "",
              ) }
					>
						Drop Header Image Here...
					</h1>
				</div>
				<textarea
					placeholder="Blog title goes here..."
					class="text-2xl md:text-4xl textarea textarea-xs textarea-ghost font-extrabold
               resize-y
               align-middle
               text-justify placeholder:text-2xl placeholder:font-normal border-transparent w-full p-6
               mt-4 focus:outline-none min-h-1 bg-base-100 rounded-b-none rounded-t-box"
					type="text"
					name="title"
					id="blog-title"
					rows="2"
				>
					if existingPost != nil {
						{ existingPost.Title }
					}
				</textarea>
				<div
					_={ fmt.Sprintf(
               "on load or htmx:swap set window.content to %s then set window.baseURL to '%s' then trigger loadEditor",
               tern.Struct(existingPost, &models.Post{}).Content,
               baseURL,
               ) }
					class="w-full md:max-w-3xl lg:max-w-4xl min-h-96 bg-base-100 p-6 shadow-2xl rounded-t-none rounded-b-box"
					hx-get="/dashboard/editor"
					hx-trigger="loadEditor"
					hx-swap="outerHTML"
				></div>
				<br/>
				<textarea
					class="hidden"
					name="content"
					type="text"
					id="content"
					if existingPost != nil {
						value={ string(existingPost.EncodedContent) }
					}
				></textarea>
				<input
					class="hidden"
					name="header_image_url"
					type="text"
					id="header_image_url"
					if existingPost != nil {
						value={ existingPost.HeaderImageURL }
					}
				/>
				<input
					class="hidden"
					name="tags"
					type="text"
					id="tags"
					if existingPost != nil {
						value={ TagsToCommaSeparated(existingPost.Tags) }
					}
				/>
				<input
					class="hidden"
					name="status"
					type="text"
					id="status"
					if existingPost != nil {
						value={ string(existingPost.Status) }
					}
				/>
				<br/>
				@submitButton(tern.Struct(existingPost, &models.Post{}).ID)
			</form>
		</div>
		<br/>
		<div class="h-20"></div>
	</div>
}

func debugString(str string) string {
	fmt.Println(str)
	return str
}

func HeaderURL(existingPost *models.Post) string {
	if existingPost != nil {
		return existingPost.HeaderImageURL
	}
	return ""
}

func TagsToCommaSeparated(tags []*models.Tag) string {
	var tagNames []string
	for _, tag := range tags {
		tagNames = append(tagNames, tag.Title)
	}
	return strings.Join(tagNames, ",")
}

templ uploadHeaderImage() {
	<script type="text/javascript">
      window.headerUpload = async function(ev, url) {
         ev.preventDefault()
         if(ev.dataTransfer.files.length === 0) {
            return
         }

         file = ev.dataTransfer.files[0]

         Swal.showLoading()

         const formData = new FormData()
         formData.append("file", file)

         let res = fetch(url + "?size=600", {
            method: "POST",
            body: formData,
            contentType: "multipart/form-data"
         })
         .then((response) => {return response.text()});
         return res
      }
   </script>
}
