package pub_post_detail

import "github.com/muhwyndhamhp/marknotes/pkg/models"
import "fmt"
import "html/template"
import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/pub"
import "github.com/muhwyndhamhp/marknotes/pub/assets"

templ PostDetail(body pub_variables.BodyOpts, post models.Post) {
	@pub.Body(pub_variables.BodyOpts{
		HeaderButtons: body.HeaderButtons,
		FooterButtons: body.FooterButtons,
		Component:     postDetail(post),
	})
}

templ postDetail(post models.Post) {
	<div class="relative w-full md:mx-auto md:max-w-3xl lg:max-w-4xl pt-8">
		<div class="flex flex-row mt-2 mx-8">
			@TitleGroup(post)
			@AdminMenu(post)
		</div>
	</div>
	<div
		class="relative w-full card card-body bg-base-100 px-6  md:max-w-3xl lg:max-w-4xl md:pt-4 lg:pb-28 lg:pt-6 mt-4 py-8 md:mx-auto shadow-xl"
	>
		@MarkdownBody(post.EncodedContent)
	</div>
}

func showSwal(text string) string {
	return fmt.Sprintf(`
    on htmx:confirm(issueRequest) 
    halt the event 
    call Swal.fire({
       title: 'Confirm %s', 
       text:'Do you want to continue?'
       }) 
    if result.isConfirmed issueRequest()
   `, text)
}

templ TitleGroup(post models.Post) {
	<div class="grow align-middle flex flex-col">
		<h1 class="text-4xl font-extrabold">{ post.Title }</h1>
		<p class="text-sm font-mono mt-4">
			{ fmt.Sprintf("Updated at %s", post.UpdatedAt.Format("January 2, 2006")) }
		</p>
		if post.PublishedAt.Unix() > 0 {
			<p class="text-sm font-mono">
				{ fmt.Sprintf("Published %s", post.PublishedAt.Format("January 2, 2006")) }
			</p>
		}
		<div id="tag-flex" class="w-full flex flex-row flex-wrap">
			for i := range post.Tags {
				<div class={ "badge badge-primary badge-outline badge-md mx-1 mt-4" }>
					{ post.Tags[i].Title }
				</div>
			}
		</div>
	</div>
}

templ AdminMenu(post models.Post) {
	if post.FormMeta["UserID"].(uint) != uint(0) {
		<div class="dropdown dropdown-hover flex-none align-middle">
			<div tabindex="0" role="button" class="btn btn-ghost align-bottom">
				@pub_assets.Setting(6)
			</div>
			<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
				<li>
					<p
						hx-get={ fmt.Sprintf("/dashboard/articles/%d/edit", post.ID) }
						hx-target="#admin-root"
						hx-push-url="true"
					>
						Edit
					</p>
				</li>
				<li>
					<p
						hx-get={ fmt.Sprintf("/posts/%d/delete", post.ID) }
						hx-target="#admin-root"
						_={ showSwal("Delete") }
					>
						Delete
					</p>
				</li>
				if post.Status == "draft" {
					<li>
						<p
							hx-get={ fmt.Sprintf("/posts/%d/publish", post.ID) }
							hx-target="#admin-root"
							_={ showSwal("Publish") }
						>Publish</p>
					</li>
				} else {
					<li>
						<p
							hx-get={ fmt.Sprintf("/posts/%d/unpublish", post.ID) }
							hx-target="#admin-root"
							_={ showSwal("Unpublish") }
						>Unpublish</p>
					</li>
				}
			</ul>
		</div>
	}
}

templ MarkdownBody(content template.HTML) {
	<article
		class="caret-rose-800 w-full mx-auto prose prose-slate lg:prose-xl md:prose-lg dark:prose-invert prose-pre:bg-slate-900 prose-pre:w-full prose-pre:text-white focus:outline-none prose-em:text-secondary prose-strong:text-primary prose-strong:font-extrabold prose-a:font-extrabold prose-a:text-accent"
		id="preview"
	>
		@RenderRaw(content)
	</article>
}

func RenderRaw(content template.HTML) templ.Component {
	return templ.Raw(content)
}
