package pub_mainmenu

import "github.com/muhwyndhamhp/marknotes/pub/variables"
import "github.com/muhwyndhamhp/marknotes/pub/base"
import "fmt"
import "github.com/muhwyndhamhp/marknotes/pub/assets"

templ MainMenu(buttons []pub_variables.InlineButton) {
	<header class="text-center">
		<div class="w-full flex-row justify-center">
			@buttonRows(buttons)
			@titleHome(false)
		</div>
	</header>
}

templ buttonRows(buttons []pub_variables.InlineButton) {
	<div
		class={ "navbar bg-base-100 shadow-xl md:rounded-badge mx-auto md:max-w-2xl md:mt-5" }
	>
		<div class="navbar-start">
			@mobileMenu(buttons)
		</div>
		<div class="navbar-center flex">
			<ul class="menu menu-horizontal px-1">
				<li class="md:hidden">
					@titleHome(true)
				</li>
				@desktopMenu(buttons)
			</ul>
		</div>
		<div class="navbar-end">
			@themePicker(DefaultThemes)
			@themePickerMobile(DefaultThemes)
		</div>
	</div>
}

templ titleHome(isInline bool) {
	<a hx-boost="true" href="/">
		<h1
			if !isInline {
				class="mt-16 mb-6 text-4xl text-info font-extrabold hidden md:flex justify-center"
			} else {
				class="text-2xl text-info font-extrabold"
			}
		>
			mwyndham.dev
		</h1>
	</a>
}

func triggerTheme(theme string, isDark bool) string {
	return fmt.Sprintf("on click window.setMkTheme('%s', %t)", theme, isDark)
}

templ themePickerMobile(themes []ThemeOption) {
	<div class="dropdown dropdown-end dropdown-hover md:hidden">
		<div tabindex="0" role="button" class="btn btn-ghost btn-circle">
			@pub_assets.Theme(20)
		</div>
		<ul
			tabindex="0"
			class="menu menu-xl md:menu-md menu-vertical dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box
         w-72 md:w-48
      max-h-72 overflow-scroll"
		>
			for _, theme := range themes {
				<li
					if theme.IsDark {
						class="hidden dark:flex"
					} else {
						class="dark:hidden"
					}
				>
					<button _={ triggerTheme(theme.Theme, theme.IsDark) }>
						{ theme.Label }
					</button>
				</li>
			}
		</ul>
	</div>
}

templ themePicker(themes []ThemeOption) {
	<div class="dropdown dropdown-end dropdown-hover hidden md:flex">
		<div tabindex="0" role="button" class="btn btn-ghost btn-circle">
			<label class="swap swap-rotate">
				<input
					id="dark-toggle"
					type="checkbox"
					_="
               on change(input) 
               get the (checked of the closest <input/>) 
               then log it then set enabled to it
               js(enabled) 
               window.toggleDarkMode(enabled); 
               window.setMkTheme(null, !enabled); 
               end
               end

               on load js() window.initialState() end end
               "
				/>
				@pub_assets.Sun(20)
				@pub_assets.Moon(20)
			</label>
		</div>
		<ul
			tabindex="0"
			class="menu menu-xl md:menu-md menu-vertical dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box
         w-72 md:w-48
      max-h-72 overflow-scroll"
		>
			for _, theme := range themes {
				<li
					if theme.IsDark {
						class="hidden dark:flex"
					} else {
						class="dark:hidden"
					}
				>
					<button _={ triggerTheme(theme.Theme, theme.IsDark) }>
						{ theme.Label }
					</button>
				</li>
			}
		</ul>
	</div>
}

templ mobileMenu(buttons []pub_variables.InlineButton) {
	<div class="dropdown md:hidden">
		<div tabindex="0" role="button" class="btn btn-ghost btn-circle">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"></path></svg>
		</div>
		<ul
			tabindex="0"
			class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-72"
		>
			for _, btn := range buttons {
				<li>
					<a
						if btn.IsBoosted {
							hx-boost="true"
						} else {
							hx-boost="false"
						}
						if !pub_base.IsVisible(btn.AuthRule, btn.UserID) {
							class="hidden"
						} else {
							class="menu text-base-content hover:font-bold hover:bg-accent hover:text-accent-content mx-2 py-2"
						}
						href={ templ.URL(btn.AnchorUrl) }
					>
						{ btn.Label }
					</a>
				</li>
			}
		</ul>
	</div>
}

templ desktopMenu(buttons []pub_variables.InlineButton) {
	for _, btn := range buttons {
		<li>
			<a
				if btn.IsBoosted {
					hx-boost="true"
				} else {
					hx-boost="false"
				}
				if !pub_base.IsVisible(btn.AuthRule, btn.UserID) {
					class="hidden"
				} else {
					class="menu rounded-badge text-base-content hover:font-bold hover:bg-accent hover:text-accent-content mx-2 hidden md:flex"
				}
				href={ templ.URL(btn.AnchorUrl) }
			>
				{ btn.Label }
			</a>
		</li>
	}
}
