package pub_editor

import "fmt"
import "github.com/muhwyndhamhp/marknotes/config"

templ Editor(uploadURL string) {
	if config.Get(config.ENV) != "dev" {
		<script src="https://resource.mwyndham.dev/dist/editor.js"></script>
	} else {
		<script src="/dist/editor.js"></script>
	}
	@uploadScript()
	<div
		_={ fmt.Sprintf(`
            on drop set window.uploadEvt to event
            then imageAltDialog.showModal()
            end

            on dragover halt the event end
            `) }
		id="code-editor"
		class="tiptap w-full min-h-96 bg-base-100 p-6 shadow-2xl rounded-t-none rounded-b-box"
	></div>
	<dialog id="imageAltDialog" class="modal">
		<div class="modal-box flex flex-col">
			<h3 class="font-bold text-lg">Almost There!</h3>
			<p class="py-4">
				It's important for us to provide accessibility information, so please do enter the alt text
				below to help screen reader.
			</p>
			<form method="dialog">
				<input type="text" placeholder="Type alt text here" class="input input-bordered w-full max-w-xs mt-4"/>
				<div class="modal-action">
					<button
						class="btn"
						_={ fmt.Sprintf(`
            on click call window.upload(window.uploadEvt, "%s")
            then
              js(it)
                url = JSON.parse(it).data.url
                editor.chain().focus().setImage({ 
                  src: url, 
                  alt: document.querySelector("#imageAltDialog input").value,
                  loading: "lazy",
                })
                .run()
                window.uploadEvt = null
                document.querySelector("#imageAltDialog input").value = ""
                Swal.close()
              end
            end`, 
            uploadURL,
            ) }
					>Submit</button>
				</div>
			</form>
		</div>
	</dialog>
}

templ uploadScript() {
	<script type="text/javascript">
      window.upload = async function(ev, url) {
         ev.preventDefault()
         if(ev.dataTransfer.files.length === 0) {
            return
         }

         file = ev.dataTransfer.files[0]

         Swal.showLoading()

         const formData = new FormData()
         formData.append("file", file)

         let res = fetch(url, {
            method: "POST",
            body: formData,
            contentType: "multipart/form-data"
         })
         .then((response) => {return response.text()});
         return res
      }
   </script>
}
